# Exemplo de arquivo de ambiente para deploy Cloud Run
# Copie para .env.deploy e ajuste valores sensíveis.

# =====================================================================
# CONFIGURAÇÃO DE DEPLOY - GOOGLE CLOUD RUN
# =====================================================================
# Copie para .env.deploy e ajuste os valores para seu ambiente.

# =====================================================================
# CONFIGURAÇÃO OBRIGATÓRIA DO PROJETO
# =====================================================================
# ID do projeto GCP (obrigatório)
PROJECT_ID=teste-398723

# Nome da aplicação/serviço
APP_NAME=cspbench

# Região do Cloud Run
REGION=us-central1

# Registry para imagens Docker
REGISTRY=gcr.io

# =====================================================================
# CONFIGURAÇÃO DE RECURSOS
# =====================================================================
# CPUs alocadas para cada instância
CPU=8

# Memória alocada (formato: 512Mi, 1Gi, 2Gi, etc.)
MEMORY=8Gi

# Número máximo de instâncias
MAX_INSTANCES=1

# Número mínimo de instâncias (0 = scale to zero)
MIN_INSTANCES=0

# Número de requisições simultâneas por instância
CONCURRENCY=80

# =====================================================================
# CONFIGURAÇÃO DE ACESSO
# =====================================================================
# Permitir acesso público sem autenticação (true/false)
ALLOW_UNAUTH=true

# =====================================================================
# CONFIGURAÇÃO DE BUILD E DEPLOY
# =====================================================================
# Realizar build da imagem Docker (true/false)
DO_BUILD=true

# Realizar push da imagem para o registry (true/false)
DO_PUSH=true

# Tag da imagem (se vazio, será gerada automaticamente com timestamp)
TAG=

# =====================================================================
# CONFIGURAÇÃO DE STORAGE
# =====================================================================
# Nome do bucket GCS para volume /data
BUCKET=csp-bench

# Ponto de montagem do bucket dentro do container
DATA_MOUNT_PATH=/data

# =====================================================================
# CONFIGURAÇÃO DA APLICAÇÃO
# =====================================================================
# As seções abaixo são idênticas ao .env.example principal

# =====================================================================
# SECTION 1: NCBI API CONFIGURATION
# =====================================================================
# Email obrigatório para API NCBI
# NCBI_EMAIL=

# Chave API opcional (aumenta limites de requisição)
# NCBI_API_KEY=

# =====================================================================
# SECTION 2: WEB INTERFACE CONFIGURATION  
# =====================================================================
# Configuration for integrated web server
# Used when running: python main.py --web

# Host/IP where web server will bind (0.0.0.0 = any IP)
WEB_HOST=0.0.0.0

# Debug mode for web server (true = hot-reload, false = production)
WEB_DEBUG=false

# Uvicorn log level (options: critical, error, warning, info, debug, trace)
# If WEB_DEBUG=true, suggested: info. If false: warning
WEB_LOG_LEVEL=info

# Enable HTTP access logs (true/false)
# Suggested: true if WEB_DEBUG=true, false otherwise
WEB_ACCESS_LOG=false


# =====================================================================
# SECTION 3: LOGGING CONFIGURATION
# =====================================================================
# Global application logging configuration
# Available levels: DEBUG, INFO, WARNING, ERROR, CRITICAL

# ---------------------------------------------------------------------
# Environment Variable Precedence (highest to lowest)
# 1. Explicit runtime flags or process-level overrides (e.g. passed by Cloud Run or docker run -e VAR=...)
# 2. Variables exported in the shell before invoking scripts (export VAR=value)
# 3. Later assignments inside this file (order matters: last wins if duplicated)
# 4. Application internal defaults coded in Python if still unset
# This file now avoids duplicate definitions; each variable appears only once.
# ---------------------------------------------------------------------

# Application log level
LOG_LEVEL=INFO

# If true, logs are written to stdout instead of rotating log file
LOG_TO_STDOUT=true
PYTHONUNBUFFERED=1

# =====================================================================
# SECTION 4: PATH CONFIGURATION
# =====================================================================
# File system paths configuration
# Defines where CSPBench finds and saves files

SETTINGS_PATH=./config/settings.yaml

# Derived directories (can be adjusted if layout changes). If you change
# DATA_MOUNT_PATH you DON'T need to edit the lines below.
# Base directory for datasets (.fasta files, etc.)
DATASET_DIRECTORY=${DATA_MOUNT_PATH}/datasets
# Base directory for batch configuration files (.yaml files)
BATCH_DIRECTORY=${DATA_MOUNT_PATH}/batches
# Base directory for execution results
OUTPUT_BASE_DIRECTORY=${DATA_MOUNT_PATH}/outputs

# Work manager database file path
WORK_DB_PATH=${DATA_MOUNT_PATH}/work_manager.db

# =====================================================================
# SECTION 5: CLEANUP AND MAINTENANCE
# =====================================================================
# Automatic cleanup and maintenance configuration

# Force cleanup of incomplete sessions on startup
# true = remove sessions without results.json on startup
# false = keep all sessions
FORCE_CLEANUP=false
