[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cspbench"
version = "0.1.0"
description = "Framework for Closest String Problem with hexagonal architecture"
readme = "README.md"
authors = [
    {name = "Diego Grosmann", email = "diego.grosmann@example.com"}
]
license = {text = "CC-BY-NC-SA-4.0"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "typer>=0.9.0",
    # Pin de compatibilidade: Typer 0.9 não suporta mudança de assinatura em click 8.2+
    "click>=8.0,<8.2",
    "PyYAML>=6.0",
    "biopython>=1.80",
    "numpy>=1.20.0",
    "optuna>=3.0.0",
    "rich>=10.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/diegogrosmann/csp-blfga"
Repository = "https://github.com/diegogrosmann/csp-blfga"
Issues = "https://github.com/diegogrosmann/csp-blfga/issues"

[project.scripts]
cspbench = "main:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["cspbench*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
cspbench = ["config/*.yaml"]

# ===================================================================
# TOOL CONFIGURATIONS
# ===================================================================

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Diretórios a excluir
  \.git
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["F401", "F811"]  # Allow unused imports and redefinitions in tests

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 88
known_first_party = ["cspbench"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=algorithms",  # incluir algoritmos externos ao src
    "--cov-report=term-missing",
    "--cov-report=html",
]
# Definir markers custom
markers = [
    "integration: marca testes de integração mais pesados",
]
# Inclui também testes de plugins em algorithms/*/tests
testpaths = ["tests", "algorithms/*/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "Bio.*",
    "optuna.*",
    "yaml.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src", "algorithms"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
