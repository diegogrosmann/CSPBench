"""
Sensitivity Analysis Report Generator

Responsible for generating specific reports for sensitivity analyses,
including visualizations of Morris, Sobol indices, etc.
"""

from pathlib import Path
from typing import Any, Dict, List

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns


class SensitivityReportGenerator:
    """
    Specific report generator for sensitivity analyses.
    """

    def __init__(self, session_path: Path):
        """
        Initialize the sensitivity report generator.

        Args:
            session_path: Session path where to save the report
        """
        self.session_path = session_path

        # Configure matplotlib
        plt.style.use("seaborn-v0_8")
        sns.set_palette("husl")

    def generate_sensitivity_report(self, sensitivity_data: Dict[str, Any]) -> None:
        """
        Generate specific report for sensitivity analysis.

        Args:
            sensitivity_data: Sensitivity analysis data
        """
        # Create report directory
        report_dir = self.session_path / "sensitivity_report"
        report_dir.mkdir(exist_ok=True)

        # Process sensitivity data
        analysis_results = self._extract_sensitivity_results(sensitivity_data)

        if not analysis_results:
            print("‚ö†Ô∏è Nenhum dado de sensibilidade encontrado para relat√≥rio")
            return

        # Gerar gr√°ficos de sensibilidade
        self._generate_sensitivity_plots(analysis_results, report_dir)

        # Gerar relat√≥rio HTML espec√≠fico
        self._generate_sensitivity_html_report(analysis_results, report_dir)

        # Exportar dados estruturados
        self._export_sensitivity_csv(analysis_results, report_dir)

        print(f"üìä Relat√≥rio de sensibilidade gerado em: {report_dir}")

    def _extract_sensitivity_results(
        self, data: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """Extrai resultados de sensibilidade da estrutura de dados."""
        results = []

        # Navegar pela estrutura aninhada
        batch_results = data.get("batch_results", [])

        for batch_result in batch_results:
            # Verificar batch_summary
            batch_summary = batch_result.get("batch_summary", {})
            summary_results = batch_summary.get("results", [])

            for result in summary_results:
                if "sensitivity_indices" in result:
                    results.append(result)

            # Verificar detailed_results
            detailed_results = batch_result.get("detailed_results", [])
            for result in detailed_results:
                if "sensitivity_indices" in result:
                    results.append(result)

        return results

    def _generate_sensitivity_plots(
        self, results: List[Dict[str, Any]], report_dir: Path
    ):
        """Gera gr√°ficos espec√≠ficos para an√°lise de sensibilidade."""
        plots_dir = report_dir / "plots"
        plots_dir.mkdir(exist_ok=True)

        for i, result in enumerate(results):
            algorithm = result.get("algorithm", f"Algorithm_{i}")
            method = result.get("analysis_method", "unknown")
            sensitivity_indices = result.get("sensitivity_indices", {})

            # Gerar gr√°fico para cada m√©trica
            for metric, indices in sensitivity_indices.items():
                if not indices or "parameter_names" not in indices:
                    continue

                self._plot_morris_indices(indices, algorithm, metric, method, plots_dir)

    def _plot_morris_indices(
        self,
        indices: Dict[str, Any],
        algorithm: str,
        metric: str,
        method: str,
        plots_dir: Path,
    ):
        """Gera gr√°fico dos √≠ndices de Morris."""
        if method.lower() != "morris":
            return

        parameter_names = indices.get("parameter_names", [])
        mu_star = indices.get("mu_star", [])
        sigma = indices.get("sigma", [])

        if not parameter_names or not mu_star or not sigma:
            return

        # Criar figura
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

        # Gr√°fico de barras Œº*
        ax1.bar(parameter_names, mu_star, color="skyblue", alpha=0.7)
        ax1.set_title(f"{algorithm} - Morris Œº* ({metric})")
        ax1.set_ylabel("Œº* (Influ√™ncia)")
        ax1.tick_params(axis="x", rotation=45)
        ax1.grid(True, alpha=0.3)

        # Gr√°fico de dispers√£o Œº* vs œÉ
        ax2.scatter(mu_star, sigma, s=100, alpha=0.7, color="coral")
        for i, param in enumerate(parameter_names):
            ax2.annotate(
                param,
                (mu_star[i], sigma[i]),
                xytext=(5, 5),
                textcoords="offset points",
                fontsize=9,
            )
        ax2.set_xlabel("Œº* (Efeito Principal)")
        ax2.set_ylabel("œÉ (Intera√ß√µes/N√£o-linearidade)")
        ax2.set_title(f"{algorithm} - Morris Œº* vs œÉ ({metric})")
        ax2.grid(True, alpha=0.3)

        plt.tight_layout()

        # Salvar gr√°fico
        filename = f"morris_{algorithm}_{metric}.png".replace(" ", "_").lower()
        plt.savefig(plots_dir / filename, dpi=300, bbox_inches="tight")
        plt.close()

    def _generate_sensitivity_html_report(
        self, results: List[Dict[str, Any]], report_dir: Path
    ):
        """Gera relat√≥rio HTML espec√≠fico para sensibilidade."""
        html_content = self._build_sensitivity_html(results)

        html_path = report_dir / "sensitivity_report.html"
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        print(f"üìã Relat√≥rio HTML de sensibilidade: {html_path}")

    def _build_sensitivity_html(self, results: List[Dict[str, Any]]) -> str:
        """Constr√≥i conte√∫do HTML para relat√≥rio de sensibilidade."""
        html = """
<!DOCTYPE html>
<html>
<head>
    <title>CSPBench - Relat√≥rio de An√°lise de Sensibilidade</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f9f9f9; }
        .header { background: #e3f2fd; padding: 20px; border-radius: 8px; border-left: 5px solid #2196f3; }
        .section { margin: 25px 0; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .analysis-table { border-collapse: collapse; width: 100%; margin: 15px 0; }
        .analysis-table th, .analysis-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        .analysis-table th { background-color: #f5f5f5; font-weight: bold; }
        .plot { margin: 20px 0; text-align: center; }
        .plot img { max-width: 100%; height: auto; border: 1px solid #ddd; border-radius: 4px; }
        .metric-section { margin: 15px 0; padding: 15px; border-left: 3px solid #4caf50; background: #f1f8e9; }
        .parameter-importance { display: inline-block; margin: 5px; padding: 8px 12px; background: #e8eaf6; border-radius: 4px; }
        .high-importance { background: #ffcdd2; }
        .medium-importance { background: #fff3e0; }
        .low-importance { background: #e8f5e8; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üî¨ CSPBench - An√°lise de Sensibilidade</h1>
        <p>Relat√≥rio detalhado da an√°lise de sensibilidade de par√¢metros dos algoritmos</p>
    </div>
    
    <div class="section">
        <h2>üìä Resumo Geral</h2>
        <table class="analysis-table">
            <tr><th>M√©trica</th><th>Valor</th></tr>
"""

        # Adicionar estat√≠sticas gerais
        total_analyses = len(results)
        algorithms = list(set(r.get("algorithm", "Unknown") for r in results))
        methods = list(set(r.get("analysis_method", "Unknown") for r in results))

        html += f"""
            <tr><td>Total de An√°lises</td><td>{total_analyses}</td></tr>
            <tr><td>Algoritmos Analisados</td><td>{', '.join(algorithms)}</td></tr>
            <tr><td>M√©todos Utilizados</td><td>{', '.join(methods)}</td></tr>
        </table>
    </div>
"""

        # Adicionar se√ß√£o para cada an√°lise
        for i, result in enumerate(results):
            algorithm = result.get("algorithm", f"Algorithm_{i}")
            method = result.get("analysis_method", "unknown")
            n_samples = result.get("n_samples", 0)
            parameters = result.get("parameters_analyzed", [])
            sensitivity_indices = result.get("sensitivity_indices", {})

            html += f"""
    <div class="section">
        <h2>üß† {algorithm} - M√©todo {method.upper()}</h2>
        <table class="analysis-table">
            <tr><td>Amostras Geradas</td><td>{n_samples}</td></tr>
            <tr><td>Par√¢metros Analisados</td><td>{len(parameters)}</td></tr>
            <tr><td>M√©tricas Avaliadas</td><td>{len(sensitivity_indices)}</td></tr>
        </table>
        
        <h3>üìà Par√¢metros Analisados</h3>
        <p>
"""
            for param in parameters:
                html += f'<span class="parameter-importance">{param}</span>'

            html += "</p>"

            # Adicionar resultados por m√©trica
            for metric, indices in sensitivity_indices.items():
                if not indices or "parameter_names" not in indices:
                    continue

                html += f"""
        <div class="metric-section">
            <h4>üìä M√©trica: {metric}</h4>
"""

                if method.lower() == "morris" and "mu_star" in indices:
                    mu_star = indices.get("mu_star", [])
                    parameter_names = indices.get("parameter_names", [])

                    html += """
            <table class="analysis-table">
                <tr><th>Par√¢metro</th><th>Œº* (Influ√™ncia)</th><th>Classifica√ß√£o</th></tr>
"""
                    for j, (param, influence) in enumerate(
                        zip(parameter_names, mu_star)
                    ):
                        if influence > 1.0:
                            classification = "Alta"
                            css_class = "high-importance"
                        elif influence > 0.5:
                            classification = "M√©dia"
                            css_class = "medium-importance"
                        else:
                            classification = "Baixa"
                            css_class = "low-importance"

                        html += f"""
                <tr class="{css_class}">
                    <td>{param}</td>
                    <td>{influence:.4f}</td>
                    <td>{classification}</td>
                </tr>
"""
                    html += "</table>"

                # Adicionar gr√°fico se existe
                plot_filename = f"morris_{algorithm}_{metric}.png".replace(
                    " ", "_"
                ).lower()
                html += f"""
            <div class="plot">
                <img src="plots/{plot_filename}" alt="Gr√°fico {metric}" onerror="this.style.display='none'">
            </div>
"""

                html += "</div>"

            html += "</div>"

        html += """
</body>
</html>
"""
        return html

    def _export_sensitivity_csv(self, results: List[Dict[str, Any]], report_dir: Path):
        """Exporta dados de sensibilidade em formato CSV."""
        csv_data = []

        for result in results:
            algorithm = result.get("algorithm", "Unknown")
            method = result.get("analysis_method", "unknown")
            n_samples = result.get("n_samples", 0)
            sensitivity_indices = result.get("sensitivity_indices", {})

            for metric, indices in sensitivity_indices.items():
                if not indices or "parameter_names" not in indices:
                    continue

                parameter_names = indices.get("parameter_names", [])

                if method.lower() == "morris" and "mu_star" in indices:
                    mu_star = indices.get("mu_star", [])
                    sigma = indices.get("sigma", [])

                    for i, param in enumerate(parameter_names):
                        csv_data.append(
                            {
                                "algorithm": algorithm,
                                "method": method,
                                "metric": metric,
                                "parameter": param,
                                "n_samples": n_samples,
                                "mu_star": mu_star[i] if i < len(mu_star) else 0,
                                "sigma": sigma[i] if i < len(sigma) else 0,
                            }
                        )

        if csv_data:
            df = pd.DataFrame(csv_data)
            csv_path = report_dir / "sensitivity_indices.csv"
            df.to_csv(csv_path, index=False)
            print(f"üìÑ Dados CSV exportados: {csv_path}")
