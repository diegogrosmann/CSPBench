name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Lint with ruff
      run: |
        ruff check .
        ruff format --check .

    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports
      continue-on-error: true  # Temporary until all type issues are resolved

    - name: Security check with bandit
      run: |
        bandit -r src -f json -o bandit-report.json || true
        bandit -r src

    - name: Dependency vulnerability check
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov=algorithms --cov-report=xml --cov-report=term-missing --cov-fail-under=85
      env:
        PYTHONPATH: ${{ github.workspace }}
        DATABASE_URL: sqlite:///:memory:
        NCBI_EMAIL: test@example.com
        NCBI_API_KEY: test_key

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          bandit-report.json
          pip-audit-report.json

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check code formatting
      run: |
        ruff format --check .

    - name: Lint code
      run: |
        ruff check . --output-format=github

    - name: Type checking
      run: |
        mypy src --ignore-missing-imports
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for gitleaks

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install gitleaks
      run: |
        wget -q https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.28.0_linux_x64.tar.gz
        tar -xzf gitleaks_8.28.0_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/

    - name: Run gitleaks
      run: |
        gitleaks detect --source . --config .gitleaks.toml --no-banner

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit pip-audit

    - name: Security scan with bandit
      run: |
        bandit -r src -ll

    - name: Vulnerability scan with pip-audit
      run: |
        pip-audit

  build:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t cspbench:latest .

    - name: Test Docker image
      run: |
        docker run --rm cspbench:latest --version

  release:
    runs-on: ubuntu-latest
    needs: [test, code-quality, build]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false